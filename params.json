{"name":"Genpasswd","tagline":"A CLI utility & Node.js lib to generate strong passwords, with deterministic options","body":"\r\nGenerate strongs passwords, with deterministics options.\r\n\r\n# CLI Tool (genpasswd)\r\n\r\nThe usage is very simple, by default the command generate a password with 15[0]\r\ncharacters length, using letters, numbers and symnbols:\r\n\r\n    $ genpasswd \r\n    h8d=1Cs<;V}[Az/\r\n\r\nYou can see all options using:\r\n\r\n    $ genpasswd --help\r\n\r\n## Passwords types\r\n\r\nPasswords types is a easy way to generate a specific format password, There are:\r\n\r\n* **alpha**: Alphabetics chars (only letters, from a to z)\r\n* **alphanumeric**: Alphabetics chars with numbers\r\n* **numeric**: Numbers\r\n* **symbols**: Symbols like #, !, etc.\r\n* **complex**: Use a mix of Alphanumerics and symbols\r\n* **custom**: Yo can set what groups of chars and add chars with --chars\r\n\r\nThis list can be showed using \r\n\r\n    $ genpasswd --types\r\n\r\nBy default, genpasswd use _complex_, you can use custom combined with selected\r\ntypes, for example:\r\n\r\n    $ genpasswd -l 30 -t custom --numeric --symbols \r\n    :`:73(;%}6{=!;452?//~@$??7+1^=\r\n\r\nThis return a password generated with numbers and symbols, you can set specific chars to, and combine:\r\n\r\n    $ genpasswd -l 30 -t custom --chars abcDEF123\r\n    1c2bcF2baaab2EF2F31aDFD32Ec31a\r\n    $genpasswd -l 30 -t custom --chars abcDEF --numeric\r\n    ac29b9863210F57Dc87Fc922ba92aa\r\n\r\n## Deterministic passwords \r\n\r\nYou can generate deterministic passwords based in thre variables; a \r\n_phrasepass_, a _salt_ and an _iterations number_, the interations are \r\nset on 1000 by default, but the phrasepass and salt are requried.\r\n\r\nThis funcions allow you to generate strong passwords for services based \r\non two (or three) memorizables seeds.\r\n\r\nFor example, if you can set a strong password to you email account, you can \r\nuse the addres as phrasepass and a simple password as the salt, for example:\r\n\r\n    $ genpasswd -d -l 30\r\n    genpass: phrasepass:  <- here you write you address (yourself@host.com)\r\n    genpass: salt:  <- here your every day password (coldplay2012$) \r\n    fQz\":Jib&7H,d}W6j+sA{)jnS~}u]3\"\r\n\r\nEver you use a deterministic algorithm to generate a password (with this \r\nutility) the password will be identical. You can generate it whenever you need\r\nit. The internal algorithm used to generate the password is \r\n[PBKDF2](https://en.wikipedia.org/wiki/PBKDF2).\r\n\r\nThe advantage of using as phrasepass the account name, is that you can have a\r\ndifferent password for each service.\r\n\r\n# Install\r\n\r\n## With npm :\r\n\r\n    $ sudo npm install genpasswd\r\n\r\n## From sources\r\n\r\n    $ git clone https://github.com/exos/genpasswd.git\r\n    $ npm install -d \r\n\r\n# Node.js package\r\n\r\n    $ npm install --save genpasswd\r\n\r\nIn your code:\r\n\r\n```JavaScript\r\n\r\nvar genPasswd = require('genpasswd');\r\n\r\nvar options = {\r\n    type: genPasswd.password.TYPE_COMPLEX,\r\n    passwordLength: 30\r\n};\r\n\r\ngenPasswd.password.generate(options, function (err, password) {\r\n    // password is a string\r\n});\r\n\r\n````\r\n\r\nYou can see more details on [the wiki](https://github.com/exos/genpasswd/wiki)\r\n\r\n# Support\r\n\r\nYou can:\r\n\r\n* Report bugs or ideas in [the tracker](https://github.com/exos/genpasswd/issues)\r\n* Fork and send pull request with bug fixeds/new features\r\n* Spellcheck (My english is horrible)\r\n* Donate BTC:  1E9A4Jg1tckJGD8rUx1WogBEL7uPXAktNP\r\n\r\n0- The 15 length password by default is because 15 chars is a better option\r\n(no best), based on stadistics [makes for me](http://log.exodica.com.ar/D)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}